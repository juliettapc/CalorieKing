#!/usr/bin/env python
# encoding: utf-8
"""
network-structure-color.py

Created by Satyam Mukherjee on 2011-02-16.
Updated on May 12 2011. 
Copyright (c) 2011 __MyCompanyName__. All rights reserved.

Plot the block model network using the block_model.gml file (generated by Dan). The size of the block is proportional to the weightloss and links are colored according to link weights. I am reconstructing this code to include the nodes of a community inside a given block.
"""

import sys
import os
import networkx as nx
from matplotlib import pyplot
import matplotlib.pyplot as plot
from collections import defaultdict
import matplotlib.cm as cm
import numpy as np
import pylab
from matplotlib.colors import LogNorm
from matplotlib.numerix import asarray
import networkx_pylab_new as nx1  #### Draw arrows using matplotlib fancyarrow !!!!


def main(graph_name):

    G = nx.read_gml(graph_name)
 
    top_nodes = []
    top_nodes.append(G.nodes())
    topn = map(int, G.nodes())
    string_mapping = dict(zip(G.nodes(), map(int, G.nodes())))

    G = nx.relabel_nodes(G, string_mapping)

    H = nx.Graph() #### For undirected graph use H = nx.Graph() and for directed use nx.DiGraph()
    H.add_edges_from(G.edges())

#    pos=nx.graphviz_layout(H,prog='twopi',args='')
    pos = nx.spring_layout(G,iterations=100)
    ncommunities = []
    wtchange = []
    npos = []
    for n in topn:    
        ncommunities.append((int(G.node[n]['id']), float(G.node[n]['size']), float(G.node[n]['weight_change'])))
        wtchange.append(float(G.node[n]['weight_change']))


    maxwt = max(wtchange)
    minwt = min(wtchange)


    nodecolor = []
    nodesize = []
    for (pos2, n, m) in ncommunities :
       nodecolor.append(plot.cm.jet(float(m-minwt)*1.0/float(maxwt-minwt)))
       nodesize.append((n))
       npos.append(pos2)

   
#    print nodesize
    popedge = []
    edgepos = []
    


    for u, v, d in G.edges(data=True):
        print u, v, G[u][v]['weight']
        popedge.append(((float(G[u][v]['log_weight']))/(float(1.0)))) 
        edgepos.append((u, v))       
    popedge.sort()

    fig = plot.figure(figsize=(10,10))
    ax = fig.add_axes((0.0,0.0,1.0,1.0))

#    cax1 = ax.imshow([ncommunities],cmap=cm.Reds,norm=LogNorm(vmin=1, vmax=maxsize))
#     cax2 = ax.imshow([popedge],cmap=cm.Blues,norm=LogNorm(vmin=1, vmax=5))

                     
    nx.draw_networkx_nodes(H, pos, nodelist=npos, node_size = nodesize, node_shape = 'o', node_color=nodecolor, cmap=plot.cm.jet)

 
    nx.draw_networkx_edges(H, pos, edgelist=edgepos, width = popedge , edge_color='gray', alpha=0.45)
#    nx.draw_path(G, pos, path, shifts=None, color='r', linestyle='solid', linewidth=1.0)
#    nx.draw_networkx_labels(H,pos,labels=None,font_size=10) ### For labeling the nodes with uid


#    formatter=ticker.LogFormatterMathtext()
    #colorbar(format=formatter)

    plot.rcParams["font.size"] = 12

#    c1=plot.colorbar(cax1,orientation='vertical',shrink = 0.55)
#    c1.set_label("Size of Community")

#    c2=plot.colorbar(cax2,orientation='horizontal',shrink = 0.55)
#    c2.set_label("Weight of link")


    pyplot.title('Communities and weight loss')
    pyplot.axis('off')
    pyplot.show()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        graph_filename = sys.argv[1]

    main(graph_filename)

    
